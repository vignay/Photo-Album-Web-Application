AWSTemplateFormatVersion: 2010-09-09
Description: Photo Album Web Application Stack

Parameters:
  S3BucketName:
    Type: String
    Default: "photo-storage-b2-cf"

  GHUser:
    Type: String
    Default: "vignay" 
  GHToken:
    Type: String
    Default: ""

  LambdaRepo:
    Type: String
    Default: ""

Resources:
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: LambdaIAMRole2
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
      Path: "/"
      
      Policies: 
      - PolicyName: MyLambdaFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action: logs:*
              Effect: Allow
              Resource: arn:aws:logs:*:*:*

      ManagedPolicyArns:
        - 'arn:aws:iam::440267342791:policy/service-role/AWSLambdaBasicExecutionRole-1a1bf598-67ce-48c5-8c1e-1b119bf32a65'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonLexFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRekognitionFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonOpenSearchServiceCognitoAccess'
        - 'arn:aws:iam::aws:policy/AmazonRekognitionCustomLabelsFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AmazonS3ObjectLambdaExecutionRolePolicy'

  LambdaFunction1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: index-photos-CF
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Code: 
        S3Bucket: photo-storage-b3
        S3Key: index-photos.zip
      Runtime: python3.9
      Timeout: 300

  LambdaFunction2:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: search-photos-CF
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Code: 
          S3Bucket: photo-storage-b3
          S3Key: search-photos.zip
      Runtime: python3.9
      Timeout: 300

  Lambda1InvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: LambdaFunction1
    Properties:
      FunctionName:
        Fn::GetAtt:
          - LambdaFunction1
          - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::${S3BucketName}
  
  Lambda2InvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: LambdaFunction2
    Properties:
      FunctionName:
        Fn::GetAtt:
          - LambdaFunction2
          - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: "arn:aws:execute-api:us-east-1:${AWS::AccountId}:${MyRestApi}/*"

  Bucket1:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: photo-storage-b1-cf
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html 
  Bucket1Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Bucket1
                - /*
      Bucket: !Ref Bucket1
    
  Bucket2:
    Type: AWS::S3::Bucket
    DependsOn: Lambda1InvokePermission
    Properties:
      BucketName: photo-storage-b2-cf
      NotificationConfiguration:
              LambdaConfigurations:
                - Event: s3:ObjectCreated:Put
                  Function: !GetAtt [ LambdaFunction1, Arn]

  OpenSearchDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: photos-cf
      EngineVersion: 'OpenSearch_1.3'
      ClusterConfig:
        DedicatedMasterEnabled: false
        InstanceType: 't3.small.search'
        ZoneAwarenessEnabled: false
        InstanceCount: 1
      DomainEndpointOptions:
        EnforceHTTPS: true
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      EBSOptions:
        EBSEnabled: True
        Iops: '3000'
        VolumeType: 'gp3'
        VolumeSize: '10'
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: false
        MasterUserOptions:
          MasterUserARN: !Join ['', ['arn:aws:iam::440267342791:role/service-role/', !Ref LambdaIAMRole]]
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: 
                - "*"  
            Action:
              - "es:*"
            Resource: "arn:aws:es:us-east-1:440267342791:domain/photos/*"

  MyRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyRestApi
      Description: 'API created from Swagger file'
      Body:
        swagger: "2.0"
        info:
          description: "AI Photo Search application, built during the Cloud and Big Data course\
            \ at Columbia University."
          version: "1.0.0"
          title: "AI Photo Search"
        host: "mhq4085rj1.execute-api.us-east-1.amazonaws.com"
        basePath: "/Prod"
        schemes:
        - "https"
        paths:
          /search:
            get:
              operationId: "searchPhotos"
              produces:
              - "application/json"
              parameters:
              - name: "q"
                in: "query"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/SearchResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                "403":
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
              x-amazon-apigateway-request-validator: "Validate body, query string parameters,\
                \ and headers"
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:440267342791:function:search-photos-CF/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /upload/{bucket}/{key}:
            put:
              produces:
              - "application/json"
              parameters:
              - name: "key"
                in: "path"
                required: true
                type: "string"
              - name: "bucket"
                in: "path"
                required: true
                type: "string"
              - name: "x-amz-meta-customLabels"
                in: "header"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/MODEL5154a5"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                credentials: "arn:aws:iam::440267342791:role/APIGate_Authentication"
                httpMethod: "PUT"
                uri: "arn:aws:apigateway:us-east-1:s3:path/{bucket}/{key}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestParameters:
                  integration.request.header.x-amz-meta-customLabels: "method.request.header.x-amz-meta-customLabels"
                  integration.request.path.key: "method.request.path.key"
                  integration.request.path.bucket: "method.request.path.bucket"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_BINARY"
                type: "aws"
            options:
              consumes:
              - "application/json"
              parameters:
              - name: "bucket"
                in: "path"
                required: true
                type: "string"
              - name: "key"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-amz-meta-customLabels'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
        definitions:
          MODEL5154a5:
            type: "object"
          Error:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int32"
              message:
                type: "string"
          Photo:
            type: "object"
            properties:
              url:
                type: "string"
              labels:
                type: "array"
                items:
                  type: "string"
          SearchResponse:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Photo"
        x-amazon-apigateway-request-validators:
          Validate body, query string parameters, and headers:
            validateRequestParameters: true
            validateRequestBody: true
        x-amazon-apigateway-binary-media-types:
        - "image/png"
        - "image/jpg"
        - "image/jpeg"



  
  MyRestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - MyRestApi
    Properties:
      RestApiId: !Ref MyRestApi
      Description: 'Deployment of the MyRestApi'
      StageName: 'Prod'

Outputs:
  ApiGatewayUrl:
    Description: The URL of the API Gateway
    Value: !Sub "https://${MyRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"